{"version":3,"sources":["Components/Nav/Nav.js","services/covidService.js","redux/trackingSlice.js","redux/hooks.js","Components/Search/Search.js","Components/WorldView/SideEstatistics/sideEstatistics.js","Components/WorldView/SideMap/sideMaps.js","Components/WorldView/worldView.js","App.js","serviceWorker.js","index.js"],"names":["Nav","dispath","useDispatch","className","to","onClick","type","payload","countries","loadCountryAsync","createAsyncThunk","country","a","reponse","fetchCountry","trackSlice","createSlice","name","initialState","countrySearch","searching","cache","error","reducers","setCountry","state","action","setSearchingState","extraReducers","pending","console","log","fulfilled","Country","rejected","store","configureStore","reducer","search","response","loadWorldDataAsync","some","ctry","includes","loadCountry","then","resp","catch","err","axios","get","responseType","Confirmed","data","TotalConfirmed","Deaths","TotalDeaths","Recovered","TotalRecovered","Active","Promise","resolve","recovered","hospitalized","positive","death","length","res","geolocation","center","features","bbox","checkCountryName","filter","useCountryState","useSelector","Search","containerStyle","searchInputStyle","searchInputContainerStyle","displayButtom","inputPlaceholder","homeContainerStyle","validationClass","visibleContainer","useState","searchField","setSearchField","containerClasss","setContainerClass","isActive","setIsActive","validateCountryName","countryName","onButtonClick","setTimeout","useEffect","style","display","value","onChange","result","target","placeholder","SideEstatistics","dispatch","String","useGlobalDispatcher","top","marginLeft","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","process","SideMap","globalCountryState","searchingState","setCountries","bounds","color","undefined","map","evt","lngLat","lng","lat","place_name","fitBounds","Consumer","addLayer","setPaintProperty","cases","calculateCovidSituation","setFilter","concat","on","WorldView","App","id","exact","path","render","component","withRouter","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.03d9de41.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Nav.css'\r\nimport {Link} from \"react-router-dom\";\r\n  import { useDispatch } from 'react-redux';\r\n\r\nconst Nav = () => {\r\n    const dispath=useDispatch()\r\n    const onMapClick = () => {\r\n        dispath({type:'track/setCountry',payload:'world'})\r\n        dispath({type:'track/setSearchingState',payload:false}) \r\n    }\r\n    return (\r\n            <div className=\"navContainer\">\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/ReactCovidTracker/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/map\" onClick={onMapClick}>Map</Link>\r\n                        </li>\r\n                    </ul>\r\n            </div>\r\n    );\r\n}\r\n \r\nexport default Nav;","export const calculateCovidSituation = (cases) =>{\r\n\r\n    let color = \"\"\r\n    if(cases<1000)\r\n        color= '#00c898'\r\n\r\n    if(cases<10000 && cases>1000)\r\n        color = '#ffe3f0'\r\n\r\n    if(cases<50000 && cases > 10000)\r\n        color = '#985f6e'\r\n\r\n    if(cases>50000)\r\n        color = \"#632f3f\"      \r\n    return color    \r\n}\r\n\r\nexport const countries = [\"World\",\"Afghanistan\", \"Åland Islands\", \"Albania\", \"Algeria\", \"American Samoa\", \"Andorra\", \"Angola\", \"Anguilla\", \"Antarctica\", \"Antigua And Barbuda\", \"Argentina\", \"Armenia\", \"Aruba\", \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia, Plurinational State Of\", \"Bonaire, Sint Eustatius And Saba\", \"Bosnia And Herzegovina\", \"Botswana\", \"Bouvet Island\", \"Brazil\", \"British Indian Ocean Territory\", \"Brunei Darussalam\", \"Bulgaria\", \"Burkina Faso\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Cayman Islands\", \"Central African Republic\", \"Chad\", \"Chile\", \"People's Republic of China\", \"Christmas Island\", \"Cocos (keeling) Islands\", \"Colombia\", \"Comoros\", \"Congo\", \"Congo, The Democratic Republic Of The\", \"Cook Islands\", \"Costa Rica\", \"Côte D'ivoire\", \"Croatia\", \"Cuba\", \"Curaçao\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Falkland Islands (malvinas)\", \"Faroe Islands\", \"Fiji\", \"Finland\", \"France\", \"French Guiana\", \"French Polynesia\", \"French Southern Territories\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Gibraltar\", \"Greece\", \"Greenland\", \"Grenada\", \"Guadeloupe\", \"Guam\", \"Guatemala\", \"Guernsey\", \"Guinea\", \"Guinea-bissau\", \"Guyana\", \"Haiti\", \"Heard Island And Mcdonald Islands\", \"Holy See (vatican City State)\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran, Islamic Republic Of\", \"Iraq\", \"Ireland\", \"Isle Of Man\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jersey\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Korea, Democratic People's Republic Of\", \"Korea, Republic Of\", \"Kuwait\", \"Kyrgyzstan\", \"Lao People's Democratic Republic\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macao\", \"Macedonia, The Former Yugoslav Republic Of\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Martinique\", \"Mauritania\", \"Mauritius\", \"Mayotte\", \"Mexico\", \"Micronesia, Federated States Of\", \"Moldova, Republic Of\", \"Monaco\", \"Mongolia\", \"Montenegro\", \"Montserrat\", \"Morocco\", \"Mozambique\", \"Myanmar\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Caledonia\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Niue\", \"Norfolk Island\", \"Northern Mariana Islands\", \"Norway\", \"Oman\", \"Pakistan\", \"Palau\", \"Palestine, State Of\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Pitcairn\", \"Poland\", \"Portugal\", \"Puerto Rico\", \"Qatar\", \"Réunion\", \"Romania\", \"Russian Federation\", \"Rwanda\", \"Saint Barthélemy\", \"Saint Helena, Ascension And Tristan Da Cunha\", \"Saint Kitts And Nevis\", \"Saint Lucia\", \"Saint Martin (french Part)\", \"Saint Pierre And Miquelon\", \"Saint Vincent And The Grenadines\", \"Samoa\", \"San Marino\", \"Sao Tome And Principe\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Sint Maarten (dutch Part)\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"South Georgia And The South Sandwich Islands\", \"South Sudan\", \"Spain\", \"Sri Lanka\", \"Sudan\", \"Suriname\", \"Svalbard And Jan Mayen\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syrian Arab Republic\", \"Taiwan, Province Of China\", \"Tajikistan\", \"Tanzania, United Republic Of\", \"Thailand\", \"Timor-leste\", \"Togo\", \"Tokelau\", \"Tonga\", \"Trinidad And Tobago\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Turks And Caicos Islands\", \"Tuvalu\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"United States Minor Outlying Islands\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Venezuela, Bolivarian Republic Of\", \"Viet Nam\", \"Virgin Islands, British\", \"Virgin Islands, U.s.\", \"Wallis And Futuna\", \"Western Sahara\", \"Yemen\", \"Zambia\", \"Zimbabwe\"];","import { createSlice,configureStore, createAsyncThunk} from '@reduxjs/toolkit';\r\nimport {fetchCountry} from './hooks'\r\n\r\nconst trackState = {\r\n    countrySearch: 'world',\r\n    searching: false,\r\n    cache: {},\r\n    error: null,\r\n}\r\n\r\nexport const loadCountryAsync = createAsyncThunk(\"track/loadCountryAsync\",async (country)=>{\r\n        const reponse =  fetchCountry(country)\r\n        return await reponse\r\n})\r\n\r\nexport const trackSlice = createSlice({\r\n    name:'track',\r\n    initialState: trackState,\r\n    reducers: {\r\n        setCountry: (state,action) => {state.countrySearch = action.payload},\r\n        setSearchingState: (state,action) => {\r\n            state.searching = action.payload\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadCountryAsync.pending] : (state,action) => {\r\n            console.log(action)\r\n        },\r\n        [loadCountryAsync.fulfilled] : (state,action) => {\r\n            state.cache[action.payload.Country] = action.payload\r\n        },\r\n        [loadCountryAsync.rejected] : (state,action) => {\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer:{\r\n        search: trackSlice.reducer\r\n    }\r\n  });\r\n","import { useSelector, useDispatch} from 'react-redux';\r\nimport {countries} from '../services/covidService'\r\nimport axios from 'axios'\r\nimport {loadCountryAsync} from './trackingSlice'\r\n\r\n\r\nexport const useGlobalDispatcher = (country) => {\r\n    const dispatch = useDispatch()\r\n    \r\n    const cache = useSelector(state => state.search.cache)\r\n        if(!cache[String(country)]){\r\n            dispatch(loadCountryAsync(country))\r\n        }\r\n}\r\n\r\n\r\nexport const fetchCountry = async (country) => { \r\n    if(country === \"world\"){\r\n        const response = loadWorldDataAsync()\r\n       return response\r\n    }\r\n    else if(countries.some(ctry => ctry.includes(country))){\r\n        return loadCountry(country).then(resp => {\r\n            return resp\r\n        }).catch(err => console.log(err))\r\n    }\r\n}\r\n\r\n\r\nexport const loadWorldDataAsync = () => {\r\n    return axios.get(\"https://api.covid19api.com/world/total\", {responseType: 'json'}).then( response => {\r\n        return {\r\n            Country: 'world',\r\n            Confirmed: response.data.TotalConfirmed,\r\n            Deaths: response.data.TotalDeaths,\r\n            Recovered: response.data.TotalRecovered,\r\n            Active: response.data.TotalConfirmed - response.data.TotalDeaths - response.data.TotalRecovered\r\n        }\r\n     }).catch(err => console.log(err))\r\n     \r\n}\r\n\r\n\r\nexport const loadCountry = (country)=>{\r\n    return new Promise((resolve)=>{\r\n        if(country === \"United States\"){\r\n            axios.get(\"http://covidtracking.com/api/us\",{responseType: 'json'}).then(resp => {\r\n                const response = {\r\n                    Country: 'United States',\r\n                    Recovered: resp.data[0].recovered,\r\n                    Active: resp.data[0].hospitalized,\r\n                    Confirmed: resp.data[0].positive,\r\n                    Deaths: resp.data[0].death\r\n                }\r\n                resolve(response)\r\n            }).catch(err => console.log(err))\r\n        }else{\r\n\r\n            axios.get(\"https://api.covid19api.com/country/\"+country, {responseType: 'json'}).then( resp => {\r\n                    resolve(resp.data[resp.data.length - 1])\r\n                    \r\n            }).catch(err => console.log(err))\r\n        }\r\n    }).then(response => {\r\n        return  axios.get(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+country+\".json?types=country&access_token=\"+process.env.REACT_APP_MAPBOX_ACCESSTOKEN,\r\n        {responseType: 'json'}).then( res => {\r\n            response.geolocation = {\r\n                center: res.data.features[0].center,\r\n                bbox:res.data.features[0].bbox\r\n            }\r\n            return response\r\n        }).catch(err => console.log(err))\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const checkCountryName = (country) => {\r\n    return countries.filter( ctry => ctry.includes(country))\r\n}\r\nexport const useCountryState = () => {\r\n    const country=useSelector(state => state.search.countrySearch)\r\n    const state = useSelector(state => state.search.cache[country])\r\n\r\n    return state\r\n}","import React, { useState,useEffect } from 'react';\r\nimport './Search.css'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useSelector, useDispatch, useStore  } from 'react-redux';\r\nimport {Link} from 'react-router-dom'\r\nimport {countries} from '../../services/covidService'\r\nimport {checkCountryName} from '../../redux/hooks'\r\n\r\nconst Search = ({containerStyle,searchInputStyle,searchInputContainerStyle,displayButtom,inputPlaceholder,homeContainerStyle,validationClass, visibleContainer}) => {\r\n    const dispath=useDispatch()\r\n\r\n    const[searchField,setSearchField]=useState('')\r\n    const[containerClasss,setContainerClass]=useState(visibleContainer? containerStyle : searchInputStyle)\r\n    const[isActive,setIsActive]=useState(true)\r\n    \r\n    const validateCountryName = (countryName) => countries.includes(countryName)? true : false\r\n\r\n    const onButtonClick = () => {\r\n        if(validateCountryName(searchField)){\r\n            visibleContainer? setContainerClass(containerStyle) : setContainerClass(searchInputStyle)\r\n                \r\n            dispath({type:'track/setCountry',payload: checkCountryName(searchField)})\r\n            dispath({type:'track/setSearchingState',payload:true})\r\n\r\n            setSearchField('')\r\n        }else{\r\n            setContainerClass(validationClass)\r\n            setTimeout(()=>setContainerClass(visibleContainer? containerStyle : searchInputStyle),3000)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        validateCountryName(searchField) === true? setIsActive(true) : setIsActive(false)\r\n    },[searchField])\r\n\r\n    return ( \r\n        <form className=\"Home\" style={{...homeContainerStyle}}>\r\n            <div className={visibleContainer? containerClasss : containerStyle} > \r\n                <Link to={isActive? \"/map\" : \"#\"} onClick={()=> onButtonClick()}>\r\n                    <input type=\"submit\" style={{display:'none'}}/>\r\n                    <button onClick={() => onButtonClick()} style={displayButtom}>\r\n                        <SearchIcon/>\r\n                    </button>\r\n                </Link>\r\n                <div className={searchInputContainerStyle}>\r\n                    <input type=\"text\"\r\n                    className={!visibleContainer? containerClasss : searchInputStyle}\r\n                    value={searchField}\r\n                    onChange={ result => setSearchField(result.target.value)}\r\n                    placeholder={inputPlaceholder}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './sideEstatistics.css'\r\nimport { useSelector} from 'react-redux';\r\nimport {useCountryState,useGlobalDispatcher} from '../../../redux/hooks'\r\nimport Search from '../../Search/Search'\r\n\r\nconst SideEstatistics = () => {\r\n    useGlobalDispatcher(useSelector(state => state.search.countrySearch))\r\n    const state = useCountryState()\r\n   \r\n    return(\r\n        <div className=\"sideEstatistics\">\r\n            <ul>\r\n                <li>\r\n                    <span>Location:</span>\r\n                    <spam className=\"searchSpam\">\r\n                        <Search containerStyle={\"searchContainer1\"} searchInputContainerStyle={\"searchInputContainerStyle1\"} searchInputStyle={\"searchInputStyle1\"} inputPlaceholder={state? state.Country: null} \r\n                        displayButtom={{display:\"none\"}} homeContainerStyle={{ top:\"5%\",marginLeft:\"2%\"}} validationClass={\"validation\"}/>\r\n                    </spam>\r\n                </li>\r\n                <li>\r\n                    <span>Total Cases:</span>\r\n                    <span>\r\n                        {state? state.Confirmed : null}\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>Deaths:</span>\r\n                    <span>\r\n                        {state? state.Deaths : null}\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>Active cases:</span>\r\n                    <span>\r\n                        {state? state.Active: null}\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>Recovered:</span>\r\n                    <span>\r\n                        {state? state.Recovered : null}\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n    </div>\r\n    )       \r\n}\r\n\r\nexport default SideEstatistics;\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport './sideMap.css'\r\nimport {useCountryState,checkCountryName} from '../../../redux/hooks'\r\nimport ReactMapboxGl,{MapContext } from \"react-mapbox-gl\";\r\nimport axios from 'axios'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {calculateCovidSituation} from '../../../services/covidService'\r\n\r\nconst Map = ReactMapboxGl({\r\n        minZoom:1,\r\n        maxZoom:8,\r\n        accessToken:process.env.REACT_APP_MAPBOX_ACCESSTOKEN\r\n})\r\n\r\n\r\n\r\nconst SideMap = () => {\r\n        const dispatch=useDispatch()\r\n\r\n        const globalCountryState=useCountryState()\r\n        const searchingState = useSelector(state => state.search.searching)\r\n\r\n        const [countries,setCountries] = useState(['world'])\r\n        const[country,setCountry]=useState({\r\n                country:'world',\r\n                bounds:null,\r\n                color:\"#c7fceb\"\r\n        })\r\n\r\n        const clickHandler = (map,evt) =>{\r\n                axios.get(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+evt.lngLat.lng+\",\"+evt.lngLat.lat+\".json?access_token=\"+process.env.REACT_APP_MAPBOX_ACCESSTOKEN)\r\n                .then( resp => {\r\n                        \r\n                        if( resp.data.features[resp.data.features.length -1] !== undefined){\r\n                                setCountries(checkCountryName(resp.data.features[resp.data.features.length -1].place_name))\r\n                                dispatch({type:'track/setCountry',payload:resp.data.features[resp.data.features.length -1].place_name})\r\n                                setCountry({ \r\n                                        country:resp.data.features[resp.data.features.length -1].place_name,\r\n                                        bounds: resp.data.features[resp.data.features.length -1].bbox\r\n                                })\r\n                        }\r\n                        \r\n                })\r\n        }\r\n\r\n        useEffect(()=>{\r\n                if(globalCountryState !== undefined){\r\n\r\n                        if(searchingState === true){\r\n                                        \r\n                                setCountry({ \r\n                                        country: globalCountryState.Country,\r\n                                        bounds: globalCountryState.geolocation.bbox\r\n                                })\r\n                                setCountries(checkCountryName(globalCountryState.Country))\r\n                                dispatch({type:'track/setSearchingState',payload:false})   \r\n                                \r\n                        }\r\n                }\r\n        },[globalCountryState])\r\n\r\n        return ( \r\n                        <div className=\"newViewport\">\r\n                                <Map style=\"mapbox://styles/pablvvera/ckg6xppv92qti19pnr73y72ie\"\r\n                                className=\"mapContainer\"\r\n                                onClick={clickHandler}\r\n                                fitBounds={country.bounds}\r\n                                >\r\n                                        <MapContext.Consumer>\r\n                                                {(map)=>{\r\n                                                        map.addLayer({\r\n                                                                'id': 'mapId',\r\n                                                                'source': {\r\n                                                                        'type': 'vector',\r\n                                                                        'url': 'mapbox://pablvvera.cpi9qsyn'\r\n                                                                },\r\n                                                                \r\n                                                                'source-layer': 'ne_10m_admin_0_countries-3t2h8u',\r\n                                                                'type': 'fill'\r\n                                                        })\r\n                                                        map.setPaintProperty('mapId',\"fill-color\",globalCountryState !== undefined? (globalCountryState.Country !== \"world\"? calculateCovidSituation(globalCountryState.Active):\"#c7fceb\"):\"#c7fceb\")\r\n                                                        \r\n                                                        map.setFilter(\r\n                                                                'mapId',\r\n                                                                ['in', 'NAME_EN'].concat(countries[0]),\r\n                                                                );\r\n                                                        map.on('error',()=>{\r\n\r\n                                                        }) \r\n\r\n                                                }}\r\n                                        </MapContext.Consumer>\r\n                                </Map>\r\n                </div>\r\n        );\r\n}\r\n \r\nexport default SideMap;","import React from 'react';\r\nimport SideEstatistics from './SideEstatistics/sideEstatistics';\r\nimport SideMap from './SideMap/sideMaps';\r\nimport './worldView.css'\r\n\r\nconst WorldView = () => {\r\n    \r\n    return (\r\n        <div className=\"worldView\">\r\n            <div className=\"map\">\r\n                <SideMap/>\r\n            </div>\r\n            <div className=\"estatisc\">\r\n                <SideEstatistics/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default WorldView;","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav/Nav'\nimport Search from './Components/Search/Search'\nimport WorldView from './Components/WorldView/worldView'\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\n\nfunction App() {\n\n\n  \n  return (\n    <BrowserRouter>\n      <div className=\"App\" id=\"appStyle\">\n        <div className=\"nav\">\n          <Nav/>\n        </div>\n        <Switch>\n            <Route exact path=\"/ReactCovidTracker/\" render={() => (\n              <Search containerStyle={\"searchContainer\"} visibleContainer={true} searchInputContainerStyle={\"searchInputContainerStyle\"} searchInputStyle={\"searchInputStyle\"} \n              inputPlaceholder={\"Countries,Provinces,Cities..\"} validationClass={\"validationError\"}/>\n            )}/>\n            <Route path=\"/map\" component={withRouter(WorldView)}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport {store} from './redux/trackingSlice'\n\nReactDOM.render(\n  <Provider store={store}>  \n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}